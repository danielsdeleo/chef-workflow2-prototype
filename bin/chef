#!/usr/bin/env ruby

require "fileutils"
#require 'pry-debugger'

class App

  def self.cmds
    @cmds ||= {}
  end

  def self.cmd(name, desc, &block)
    cmds[name.to_s.gsub("_", "-")] = {
      :method => name,
      :description => desc
    }
    define_method(name, &block)
  end

  def run
    if cmd = ARGV[0] and self.class.cmds[cmd] and cmd_method = self.class.cmds[cmd][:method]
      ARGV.shift
      send(cmd_method)
    else
      help_and_exit
    end
  end

  def help_and_exit
    puts "Available commands:"
    puts ""
    self.class.cmds.each do |cmd, value|
      puts "#{cmd}:"
      puts "  #{value[:description]}"
    end
    exit 1
  end

  def skeleton_dir
    File.expand_path("../../skeletons", __FILE__)
  end

  def copy_skeleton(name, to)
    FileUtils.cp_r("#{skeleton_dir}/#{name}", to)
  end

  def generate_from_skeleton(skel_name, rel_path, to)
    FileUtils.cp("#{skeleton_dir}/#{skel_name}/#{rel_path}", to)
  end

  def responses_dir
    File.expand_path("../../responses", __FILE__)
  end

  def respond_with(response_name)
    response_lines = IO.readlines("#{responses_dir}/#{response_name}.txt")
    response_lines.each { |l|
      if l.start_with? "##"
        meta_command = l.gsub("#", "").split(" ")
        case meta_command[0]
        when "progress"
          progress_time = meta_command[1].to_i
          while progress_time > 0
            putc "."
            sleep 0.5
            progress_time -= 0.5
          end
          puts ""
        else
          puts "Unkown meta command #{l}"
          exit 1
        end
      else
        sleep 0.001;
        puts l
      end
    }
  end

  def ensure_vagrant_installed
    if !File.exists?(".wf2/.vagrant-installed")
      puts "Your environment is configured to use :vagrant provider for provisioning."
      puts "But vagrant is not installed. Would you like to install & configure it? [Y/n]"
      response = STDIN.gets.chomp
      if response == "" || response.downcase == "y"
        respond_with("install_vagrant")
        FileUtils.touch ".wf2/.vagrant-installed"
      else
        puts "Vagrant needes to be installed on the system before continueing."
        puts "For more information: http://www.vagrantup.com/"
        exit 1
      end
    end
  end

  def run_env(environment)
    if environment == "development" || environment == "test"
      puts "=> Running chef on '#{environment}' using 'vagrant':"
      system "cd .wf2 && vagrant provision #{environment} && cd .."
    else
      puts "TODO: Run chef for staging."
    end
  end

  def provision_env(environment)
    if environment == "development" || environment == "test"
      ensure_vagrant_installed
      if !File.exists? ".wf2/#{environment}.provision"
        puts "=> Provisioning '#{environment}' using 'vagrant':"
        system "cd .wf2 && vagrant up #{environment} --no-provision && cd .."
        FileUtils.touch ".wf2/#{environment}.provision"
      else
        puts "=> '#{environment}' is already provisioned."
      end
    else
      puts "TODO: Provision for staging."
    end
  end

  cmd(:create_app, "Create a new Chef application") do
    name = ARGV[0]
    if name.nil?
      # in real version we might allow `wf2 create-app .` to "initialize" an
      # existing app as a chefapp...
      puts "Usage: chef create-app APPNAME"
    elsif name != "demo"
      puts "This app is in demo mode. Send your CC details to sales@getchef.com to unlock. #lolz"
      exit 1
    end
    if File.exist?("demo")
      puts "conflict: there is already a file/directory named 'demo' in this directory"
      exit 1
    end
    copy_skeleton("generated_app", "demo")
    respond_with("create_app")
  end

  def ensure_in_correct_dir
    unless File.basename(Dir.pwd) == "demo"
      puts "Error: not in a valid application directory"
      exit 1
    end
  end

  def ensure_policy_compiled
    unless File.exist?("Policyfile.lock.json")
      puts "Error: you must compile your policy with `chef compile` before converging"
      exit 1
    end
  end

  cmd(:compile, "Update the Chef policy before deployments") do
    if !File.exist?("Policyfile.lock.json")
      generate_from_skeleton("basic_policy", "Policyfile.lock.json", "Policyfile.lock.json")
      respond_with("basic_compile")
    else
      generate_from_skeleton("modified_policy", "Policyfile.lock.json", "Policyfile.lock.json")
      respond_with("modified_compile")
    end
  end

  cmd(:diff, "Check local changes against Chef Server") do
    respond_with("diff_policy")
  end

  cmd(:converge, "Apply changes to an environment") do
    environment = ARGV[0]
    ensure_in_correct_dir
    ensure_policy_compiled
    case environment
    when "local"
      exec "chef-client", "-z", "-N", "local", "-c", "client-local.rb"
    when "development", "test", "staging"
      provision_env(environment)
      run_env(environment)
    else
      puts "Unknown environment: #{environment}"
      puts "Please specify a valid environment: local, development, test, staging"
    end
  end

  cmd(:test, "Run unit or integration tests for Chef Application") do
    specs = ARGV[0]
    ensure_in_correct_dir
    ensure_policy_compiled
    case specs
    when "unit"
      exec "rspec", "spec/unit/default_spec.rb", "--format", "documentation", "--color"
    when "integration"
      # There is a bug in test-kitchen where
      # Running test-kitchen directly here, we're hitting this issue:
      # https://github.com/mitchellh/vagrant/issues/2309
      # The first time run fails and the second one succeeds.
      # For a beautiful demo we run it once silenced and twice with all of its glory.
      puts "=> Setting up integration testing environment..."
      system "kitchen create >/dev/null 2>&1"
      exec "kitchen", "test"
    else
      puts "Unknown test switch: #{specs}"
      puts "Please specify a valid swithc: unit, integration"
    end
  end

  cmd(:login, "Login to a previously provisioned node") do
    environment = ARGV[0]
    ensure_in_correct_dir
    if environment == "development" || environment == "test"
      system "cd .wf2 && vagrant ssh #{environment} && cd .."
    else
      puts "TODO: Login to staging."
    end
  end

  cmd(:provision, "Provision nodes using Metalfile configuration") do
    environment = ARGV[0]
    ensure_in_correct_dir
    ensure_policy_compiled
    case environment
    when "development", "test", "staging"
      provision_env(environment)
    else
      puts "Unknown environment: #{environment}"
      puts "Please specify a valid environment: development, test, staging"
    end
  end

  cmd(:push, "Upload policy changes to a Chef Server") do
    # Not demoed on its own.
  end

  cmd(:deploy, "Deploy local changes to a given environment") do
    respond_with("show_changes")

    response = STDIN.gets.chomp
    if response == "" || response.downcase == "y"
      respond_with("deploy_changes")
    end
  end
end

App.new.run
