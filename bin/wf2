#!/usr/bin/env ruby

require "fileutils"
require "pry-debugger"

class App

  def self.cmds
    @cmds ||= {}
  end

  def self.cmd(name, &block)
    cmds[name.to_s.gsub("_", "-")] = name
    define_method(name, &block)
  end

  def run
    if cmd = ARGV[0] and cmd_method = self.class.cmds[cmd]
      ARGV.shift
      send(cmd_method)
    else
      help_and_exit
    end
  end

  def help_and_exit
    puts "Available commands:"
    puts ""
    puts self.class.cmds.keys
    exit 1
  end

  def skeleton_dir
    File.expand_path("../../skeletons", __FILE__)
  end

  def copy_skeleton(name, to)
    FileUtils.cp_r("#{skeleton_dir}/#{name}", to)
  end

  def responses_dir
    File.expand_path("../../responses", __FILE__)
  end

  def respond_with(response_name)
    response_lines = IO.readlines("#{responses_dir}/#{response_name}.txt")
    response_lines.each { |l|
      if l.start_with? "##"
        meta_command = l.gsub("#", "").split(" ")
        case meta_command[0]
        when "progress"
          progress_time = meta_command[1].to_i
          while progress_time > 0
            putc "."
            sleep 0.5
            progress_time -= 0.5
          end
          puts ""
        else
          "Unkown meta command #{l}"
          exit 1
        end
      else
        sleep 0.001;
        puts l
      end
    }
  end

  def ensure_vagrant_installed
    if !File.exists?(".wf2/.vagrant-installed")
      puts "Your environment is configured to use :vagrant provider for provisioning."
      puts "But vagrant is not installed. Would you like to install & configure it? [Y/n]"
      response = STDIN.gets.chomp
      if response == "" || response.downcase == "y"
        respond_with("install_vagrant")
        FileUtils.touch ".wf2/.vagrant-installed"
      else
        puts "Vagrant needes to be installed on the system before continueing."
        puts "For more information: http://www.vagrantup.com/"
        exit 1
      end
    end
  end

  def provision_env(environment)
    if environment == "development" || environment == "test"
      ensure_vagrant_installed
      puts "=> Provisioning '#{environment}' using 'vagrant':"
      system "cd .wf2 && vagrant up #{environment} --no-provision && cd .."
    else
      puts "TODO: Provisioning environment: #{environment}"
    end
  end

  cmd(:create_app) do
    name = ARGV[0]
    if name.nil?
      # in real version we might allow `wf2 create-app .` to "initialize" an
      # existing app as a chefapp...
      puts "Usage: wf2 create-app APPNAME"
    elsif name != "demo"
      puts "This app is in demo mode. Send your CC details to sales@getchef.com to unlock. #lolz"
      exit 1
    end
    if File.exist?("demo")
      puts "conflict: there is already a file/directory named 'demo' in this directory"
      exit 1
    end
    copy_skeleton("generated_app", "demo")
    respond_with("create_app")
  end

  def ensure_in_correct_dir
    unless File.basename(Dir.pwd) == "demo"
      puts "Error: not in a valid application directory"
      exit 1
    end
  end

  cmd(:run) do
    environment = ARGV[1]
    ensure_in_correct_dir
    case environment
    when "local"
      exec "chef-client", "-z", "-N", "local", "-c", "client-local.rb"
    when "development"
      provision_env(environment)
    when "test"
      'TODO: Will run chef on the test box.'
    when "staging"
      'TODO: Will run chef in staging.'
    else
      puts "Unknown environment: #{environment}"
      puts "Please specify a valid environment: local, development, test, staging"
    end
  end

  cmd(:test) do
    specs = ARGV[1]
    ensure_in_correct_dir
    case specs
    when "unit"
      exec "rspec", "spec/unit/default_spec.rb", "--format", "documentation", "--color"
    when "integration"
      puts "TODO: Will run test kitchen now."
    else
      puts "Unknown test switch: #{specs}"
      puts "Please specify a valid swithc: unit, integration"
    end
  end

  cmd(:login) do
    # TODO
  end

  cmd(:provision) do
    environment = ARGV[1]
    ensure_in_correct_dir
    case environment
    when "development"
      'TODO: Will provision development box.'
    when "test"
      'TODO: Will provision test box.'
    when "staging"
      'TODO: Will provision staging.'
    else
      puts "Unknown environment: #{environment}"
      puts "Please specify a valid environment: development, test, staging"
    end
  end

  cmd(:push) do
    # TODO
  end

  cmd(:deploy) do
    # TODO
  end
end

App.new.run
