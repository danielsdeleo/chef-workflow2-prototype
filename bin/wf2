#!/usr/bin/env ruby

require "fileutils"

class App

  def self.cmds
    @cmds ||= {}
  end

  def self.cmd(name, &block)
    cmds[name.to_s.gsub("_", "-")] = name
    define_method(name, &block)
  end

  def run
    if cmd = ARGV[0] and cmd_method = self.class.cmds[cmd]
      ARGV.shift
      send(cmd_method)
    else
      help_and_exit
    end
  end

  def help_and_exit
    puts "Available commands:"
    puts ""
    puts self.class.cmds.keys
    exit 1
  end

  def skeleton_dir
    File.expand_path("../../skeletons", __FILE__)
  end

  def copy_skeleton(name, to)
    FileUtils.cp_r("#{skeleton_dir}/#{name}", to)
  end

  def responses_dir
    File.expand_path("../../responses", __FILE__)
  end

  def respond_with(response_name)
    response_lines = IO.readlines("#{responses_dir}/#{response_name}.txt")
    response_lines.each { |l| sleep 0.001; puts l }
  end


  cmd(:create_app) do
    name = ARGV[0]
    if name.nil?
      # in real version we might allow `wf2 create-app .` to "initialize" an
      # existing app as a chefapp...
      puts "Usage: wf2 create-app APPNAME"
    elsif name != "demo"
      puts "This app is in demo mode. Send your CC details to sales@getchef.com to unlock. #lolz"
      exit 1
    end
    if File.exist?("demo")
      puts "conflict: there is already a file/directory named 'demo' in this directory"
      exit 1
    end
    copy_skeleton("generated_app", "demo")
    respond_with("create_app")
  end

  def ensure_in_correct_dir
    unless File.basename(Dir.pwd) == "demo"
      puts "Error: not in a valid application directory"
      exit 1
    end
  end

  cmd(:run_local) do
    ensure_in_correct_dir
    exec "chef-client", "-z", "-N", "local", "-c", "client-local.rb"
  end

  cmd(:unit_test) do
    # TODO
  end

  cmd(:run_vm) do
    # TODO
  end

  cmd(:login_dev) do
    # TODO
  end

  cmd(:login_test) do
    # TODO
  end

  cmd(:provision) do
    # TODO
  end

  cmd(:push) do
    # TODO
  end

  cmd(:deploy) do
    # TODO
  end
end

App.new.run
