$ chef create-app demo

=> print any relevant global config
=> generate skeleton
=> tell the user what's next

$ cd demo
$ ls -R

=> What's in the skeleton?

Policyfile
Metalfile
cookbooks/
cookbooks/demo/
cookbooks/demo/metadata.rb
cookbooks/demo/recipes/
cookbooks/demo/recipes/default.rb

$ cat Policyfile

=> (this is the extended berksfile)

> name "demo"
>
> # which recipes to run when applying this policy to a node:
> run_list "recipe[demo::default]"
> run_list :quick_app_deploy, "recipe[demo::just_the_app_please]"
>
> # Any cookbook without an explicit source comes from here:
> default_source "https://community-api.getchef.com"
>
> # Override the source of the "demo" cookbook:
> cookbook "demo", :path => "./cookbooks"
>
> default_attributes "foo" => "bar"
> override_attributes "foo" => "baz"

$ cat Metalfile

=> default config for how dev and test VM instances are launched
=> probably defaults to vagrant, but could have commented out instructions for
   a "null" provisioner to manually managed VM or whatever.

$ chef converge local

=> Error: you must compile your policy with `chef compile` before
  converging

$ chef compile

> Compiling ./Policyfile
> Compiling policy "demo"
> Expanded run_list to: recipe[demo::default]
> Using cookbook "demo" version 0.1.0 from path ./cookbooks/demo
>
> Policy compiled. Use `chef compile` to update dependencies.

## DISCUSSION ##
# In the interest of speed (and quick dev feedback) we want to avoid
# hitting the network wherever possible. Therefore, we want to avoid
# recomputing the entire dependency solution (which may include git or
# cookbook site operations). However, we also don't want to create a
# situation where users are required to constantly type the same command
# over and over again.
#
# Because we've chosen to generate cookbook identifiers from the content
# of the cookbooks, we need to ensure that the identifiers for on-disk
# cookbooks are updated before we upload them to the outside world or
# use the identifiers for comparison (e.g., a `diff` tool)

$ cat Policyfile.lock.json

=> See Policyfile.lock.json

$ chef converge local

=> run w/ chef-zero local mode.
=> should have a log/file/whatever resource that does something

$ chef test unit

=> chefspec

$ chef test integration

=> runs TK

$ $EDITOR hack code

## Note: `sh bin/update-demo-files.sh` is a stand-in for this step

=> Make the cookbook(s) do more than just print stuff

$ less Policyfile

=> Note the below lines are changed:
=> cookbook 'postgresql', :git => "git@github.com:hw-cookbooks/postgresql.git"
=> default_attributes "hello-message" => "This is from policy attributes."

$ less cookbooks/demo/recipes/default.rb

=> Note the below lines are changed:
=> include_recipe "postgresql"

$ chef compile

## DISCUSSION:##
# This step is only required if we suppose we're using a community
# cookbook, which might come a lot later in the related learnchef
# content for this tool.
#

> Compiling ./Policyfile
> Compiling policy "demo"
> Expanded run_list to: recipe[demo::default]
> Using cookbook "demo" version 0.1.0 from path ./cookbooks/demo
> Using cookbook "postgresql" version 3.3.4 from git "git@github.com:hw-cookbooks/postgresql.git"
>
> Policy compiled. Use `chef compile` to update dependencies.

$ cat Policyfile.lock.json

=> see updated locks including postgres.

$ chef converge development

=> default config? Vagrant?
=> vagrant isn't installed, auto-install
=> see output from chef run
=> see that the policy attribute specified in the Policyfile is used in the convergence.

$ chef login development

=> Get ssh session on the box
=> Do something to show the box was converged
=> exit ssh session

# You can also only provision the VM and converge chef any time you want.
$ chef provision test

=> Show that test is only provisioned

# You can also only provision the VM and converge chef any time you want.
$ chef converge test

=> Show that test is only converged

$ chef diff ENV_NAME

=> See what changed:
* cookbook demo from Nothing => 0.1.0
* cookbook postgres from Nothing => x.y.z
* attribute default["hello_message"] from Nothing => "hello"

$ chef deploy ENV_NAME (or cell name, whatever)

=> upload cookbooks
=> upload policy, apply to env/cell/deploy-group

$ chef help

=> Show that you can also use chef to:
   * Only upload necessary cookbooks
   * Only push the policy
   * Only run CCRs on the necessary nodes

################################################################################
# Improvements:
################################################################################
## Provision nodes using Metalfile
  `chef provision`: create some nodes from Metalfile

## Configure chef server connection via prompt
  $ $EDITOR hack server creds
  => get client.pem, username

## Have an actual test-kitchen test amongst the integration tests

################################################################################
## QUESTIONS
################################################################################
## What now? provision a node w/ chef-metal?
## Future pushy integration will be cool, not in 1.0
